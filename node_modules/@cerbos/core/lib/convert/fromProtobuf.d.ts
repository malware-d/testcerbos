import type { CheckInput as CheckInputProtobuf, CheckOutput as CheckOutputProtobuf } from "../protobuf/cerbos/engine/v1/engine";
import type { Policy as PolicyProtobuf } from "../protobuf/cerbos/policy/v1/policy";
import type { CheckResourcesResponse as CheckResourcesResponseProtobuf, DeleteSchemaResponse, DisablePolicyResponse, EnablePolicyResponse, GetPolicyResponse, GetSchemaResponse, InspectPoliciesResponse as InspectPoliciesResponseProtobuf, ListAuditLogEntriesResponse, ListPoliciesResponse as ListPoliciesResponseProtobuf, ListSchemasResponse as ListSchemasResponseProtobuf, PlanResourcesResponse as PlanResourcesResponseProtobuf } from "../protobuf/cerbos/response/v1/response";
import type { HealthCheckResponse as HealthCheckResponseProtobuf } from "../protobuf/grpc/health/v1/health";
import type { AccessLogEntry, CheckInput, CheckOutput, DecisionLogEntry, DeleteSchemasResponse, DisablePoliciesResponse, EnablePoliciesResponse, GetPoliciesResponse, GetSchemasResponse, HealthCheckResponse, InspectPoliciesResponse, ListPoliciesResponse, ListSchemasResponse, PlanResourcesResponse, Policy } from "../types/external";
import { CheckResourcesResponse } from "../types/external";
export declare function accessLogEntryFromProtobuf({ entry, }: ListAuditLogEntriesResponse): AccessLogEntry;
export declare function decisionLogEntryFromProtobuf({ entry, }: ListAuditLogEntriesResponse): DecisionLogEntry;
/** @internal */
export declare function checkInputFromProtobuf({ requestId, principal, resource, actions, auxData, }: CheckInputProtobuf): CheckInput;
/** @internal */
export declare function checkOutputFromProtobuf({ requestId, resourceId, actions, effectiveDerivedRoles, validationErrors, outputs, }: CheckOutputProtobuf): CheckOutput;
export declare function checkResourcesResponseFromProtobuf({ cerbosCallId, requestId, results, }: CheckResourcesResponseProtobuf): CheckResourcesResponse;
export declare function deleteSchemasResponseFromProtobuf({ deletedSchemas, }: DeleteSchemaResponse): DeleteSchemasResponse;
export declare function disablePoliciesResponseFromProtobuf({ disabledPolicies, }: DisablePolicyResponse): DisablePoliciesResponse;
export declare function enablePoliciesResponseFromProtobuf({ enabledPolicies, }: EnablePolicyResponse): EnablePoliciesResponse;
export declare function getPoliciesResponseFromProtobuf({ policies, }: GetPolicyResponse): GetPoliciesResponse;
export declare function healthCheckResponseFromProtobuf({ status, }: HealthCheckResponseProtobuf): HealthCheckResponse;
/** @internal */
export declare function policyFromProtobuf({ apiVersion, description, disabled, metadata, variables, policyType, }: PolicyProtobuf): Policy;
export declare function getSchemasResponseFromProtobuf({ schemas, }: GetSchemaResponse): GetSchemasResponse;
export declare function inspectPoliciesResponseFromProtobuf({ results, }: InspectPoliciesResponseProtobuf): InspectPoliciesResponse;
export declare function listPoliciesResponseFromProtobuf({ policyIds, }: ListPoliciesResponseProtobuf): ListPoliciesResponse;
export declare function listSchemasResponseFromProtobuf({ schemaIds, }: ListSchemasResponseProtobuf): ListSchemasResponse;
export declare function planResourcesResponseFromProtobuf({ cerbosCallId, requestId, filter, validationErrors, meta, }: PlanResourcesResponseProtobuf): PlanResourcesResponse;
/** @internal */
export declare const unexpected: unique symbol;
type Unexpected = typeof unexpected;
/** @internal */
export declare function translateEnum<Enum extends Record<string | number, number | string>, Result>(descriptor: string, source: Enum, value: Enum[keyof Enum], translate: Record<Enum[keyof Enum], Result | Unexpected>): Result;
/** @internal */
export declare function requireField<T>(descriptor: string, value: T | undefined): asserts value is T;
export {};
//# sourceMappingURL=fromProtobuf.d.ts.map