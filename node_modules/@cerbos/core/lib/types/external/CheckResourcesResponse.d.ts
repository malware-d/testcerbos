import type { CheckResourcesResult } from "./CheckResourcesResult";
import type { ResourceSearch } from "./ResourceSearch";
import type { ValidationError } from "./ValidationError";
/**
 * The outcome of checking a principal's permissions on a set of resources.
 *
 * @public
 */
export declare class CheckResourcesResponse {
    /**
     * The unique identifier for the request used in audit logs.
     *
     * @remarks
     * Requires the Cerbos policy decision point server to be at least v0.33.
     */
    cerbosCallId: string;
    /**
     * The identifier for tracing the request.
     */
    requestId: string;
    /**
     * The outcomes of the permission checks for each resource.
     */
    results: CheckResourcesResult[];
    constructor({ cerbosCallId, requestId, results, }: Pick<CheckResourcesResponse, "cerbosCallId" | "requestId" | "results">);
    /**
     * Check if the policy decision was that all input actions should be allowed for a resource.
     *
     * @param resource - the resource search criteria.
     * @returns `undefined` if the resource is not present in the results.
     */
    allAllowed(resource: ResourceSearch): boolean | undefined;
    /**
     * List the actions that should be allowed for a resource.
     *
     * @param resource - the resource search criteria.
     * @returns `undefined` if the resource is not present in the results.
     */
    allowedActions(resource: ResourceSearch): string[] | undefined;
    /**
     * Check if the policy decision was that an action should be allowed for a resource.
     *
     * @param check - the resource search criteria and action to check.
     * @returns `undefined` if the resource or action is not present in the results.
     */
    isAllowed(check: {
        resource: ResourceSearch;
        action: string;
    }): boolean | undefined;
    /**
     * Find an item from {@link CheckResourcesResponse.results | results} by resource.
     *
     * @param resource - the resource search criteria.
     * @returns `undefined` if the resource is not present in the results.
     */
    findResult(resource: ResourceSearch): CheckResourcesResult | undefined;
    /**
     * Unique schema validation errors for the principal or resource attributes.
     */
    get validationErrors(): ValidationError[];
}
//# sourceMappingURL=CheckResourcesResponse.d.ts.map