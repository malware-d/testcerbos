import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "google.protobuf";
export declare enum NullValue {
    NULL_VALUE = 0
}
export interface Struct {
    fields: {
        [key: string]: any | undefined;
    };
}
export interface Struct_FieldsEntry {
    key: string;
    value: any | undefined;
}
export interface Value {
    kind?: {
        $case: "nullValue";
        nullValue: NullValue;
    } | {
        $case: "numberValue";
        numberValue: number;
    } | {
        $case: "stringValue";
        stringValue: string;
    } | {
        $case: "boolValue";
        boolValue: boolean;
    } | {
        $case: "structValue";
        structValue: {
            [key: string]: any;
        } | undefined;
    } | {
        $case: "listValue";
        listValue: Array<any> | undefined;
    } | undefined;
}
export interface ListValue {
    values: any[];
}
export declare const Struct: MessageFns<Struct> & StructWrapperFns;
export declare const Struct_FieldsEntry: MessageFns<Struct_FieldsEntry>;
export declare const Value: MessageFns<Value> & AnyValueWrapperFns;
export declare const ListValue: MessageFns<ListValue> & ListValueWrapperFns;
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
}
export interface StructWrapperFns {
    wrap(object: {
        [key: string]: any;
    } | undefined): Struct;
    unwrap(message: Struct): {
        [key: string]: any;
    };
}
export interface AnyValueWrapperFns {
    wrap(value: any): Value;
    unwrap(message: any): string | number | boolean | Object | null | Array<any> | undefined;
}
export interface ListValueWrapperFns {
    wrap(array: Array<any> | undefined): ListValue;
    unwrap(message: ListValue): Array<any>;
}
//# sourceMappingURL=struct.d.ts.map