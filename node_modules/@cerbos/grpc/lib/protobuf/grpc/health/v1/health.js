"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: grpc/health/v1/health.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthClient = exports.HealthService = exports.HealthListResponse_StatusesEntry = exports.HealthListResponse = exports.HealthListRequest = exports.HealthCheckResponse = exports.HealthCheckRequest = exports.HealthCheckResponse_ServingStatus = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
exports.protobufPackage = "grpc.health.v1";
var HealthCheckResponse_ServingStatus;
(function (HealthCheckResponse_ServingStatus) {
    HealthCheckResponse_ServingStatus[HealthCheckResponse_ServingStatus["UNKNOWN"] = 0] = "UNKNOWN";
    HealthCheckResponse_ServingStatus[HealthCheckResponse_ServingStatus["SERVING"] = 1] = "SERVING";
    HealthCheckResponse_ServingStatus[HealthCheckResponse_ServingStatus["NOT_SERVING"] = 2] = "NOT_SERVING";
    HealthCheckResponse_ServingStatus[HealthCheckResponse_ServingStatus["SERVICE_UNKNOWN"] = 3] = "SERVICE_UNKNOWN";
})(HealthCheckResponse_ServingStatus || (exports.HealthCheckResponse_ServingStatus = HealthCheckResponse_ServingStatus = {}));
function createBaseHealthCheckRequest() {
    return { service: "" };
}
exports.HealthCheckRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.service !== "") {
            writer.uint32(10).string(message.service);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthCheckRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.service = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseHealthCheckResponse() {
    return { status: 0 };
}
exports.HealthCheckResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthCheckResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseHealthListRequest() {
    return {};
}
exports.HealthListRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseHealthListResponse() {
    return { statuses: {} };
}
exports.HealthListResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.statuses).forEach(([key, value]) => {
            exports.HealthListResponse_StatusesEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.HealthListResponse_StatusesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.statuses[entry1.key] = entry1.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseHealthListResponse_StatusesEntry() {
    return { key: "", value: undefined };
}
exports.HealthListResponse_StatusesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.HealthCheckResponse.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthListResponse_StatusesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.HealthCheckResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
exports.HealthService = {
    check: {
        path: "/grpc.health.v1.Health/Check",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.HealthCheckRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.HealthCheckRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.HealthCheckResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.HealthCheckResponse.decode(value),
    },
    list: {
        path: "/grpc.health.v1.Health/List",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.HealthListRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.HealthListRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.HealthListResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.HealthListResponse.decode(value),
    },
    watch: {
        path: "/grpc.health.v1.Health/Watch",
        requestStream: false,
        responseStream: true,
        requestSerialize: (value) => Buffer.from(exports.HealthCheckRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.HealthCheckRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.HealthCheckResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.HealthCheckResponse.decode(value),
    },
};
exports.HealthClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.HealthService, "grpc.health.v1.Health");
//# sourceMappingURL=health.js.map