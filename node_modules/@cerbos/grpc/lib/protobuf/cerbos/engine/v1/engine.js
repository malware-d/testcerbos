"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: cerbos/engine/v1/engine.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuxData_JwtEntry = exports.AuxData = exports.Principal_AttrEntry = exports.Principal = exports.Resource_AttrEntry = exports.Resource = exports.OutputEntry = exports.CheckOutput_ActionsEntry = exports.CheckOutput_ActionEffect = exports.CheckOutput = exports.CheckInput = exports.PlanResourcesOutput_MatchedScopesEntry = exports.PlanResourcesOutput = exports.PlanResourcesFilter_Expression_Operand = exports.PlanResourcesFilter_Expression = exports.PlanResourcesFilter = exports.PlanResourcesInput_Resource_AttrEntry = exports.PlanResourcesInput_Resource = exports.PlanResourcesInput = exports.PlanResourcesFilter_Kind = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const struct_1 = require("../../../google/protobuf/struct");
const schema_1 = require("../../schema/v1/schema");
exports.protobufPackage = "cerbos.engine.v1";
var PlanResourcesFilter_Kind;
(function (PlanResourcesFilter_Kind) {
    PlanResourcesFilter_Kind[PlanResourcesFilter_Kind["KIND_UNSPECIFIED"] = 0] = "KIND_UNSPECIFIED";
    PlanResourcesFilter_Kind[PlanResourcesFilter_Kind["KIND_ALWAYS_ALLOWED"] = 1] = "KIND_ALWAYS_ALLOWED";
    PlanResourcesFilter_Kind[PlanResourcesFilter_Kind["KIND_ALWAYS_DENIED"] = 2] = "KIND_ALWAYS_DENIED";
    PlanResourcesFilter_Kind[PlanResourcesFilter_Kind["KIND_CONDITIONAL"] = 3] = "KIND_CONDITIONAL";
})(PlanResourcesFilter_Kind || (exports.PlanResourcesFilter_Kind = PlanResourcesFilter_Kind = {}));
function createBasePlanResourcesInput() {
    return {
        requestId: "",
        action: "",
        actions: [],
        principal: undefined,
        resource: undefined,
        auxData: undefined,
        includeMeta: false,
    };
}
exports.PlanResourcesInput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.action !== "") {
            writer.uint32(18).string(message.action);
        }
        for (const v of message.actions) {
            writer.uint32(58).string(v);
        }
        if (message.principal !== undefined) {
            exports.Principal.encode(message.principal, writer.uint32(26).fork()).join();
        }
        if (message.resource !== undefined) {
            exports.PlanResourcesInput_Resource.encode(message.resource, writer.uint32(34).fork()).join();
        }
        if (message.auxData !== undefined) {
            exports.AuxData.encode(message.auxData, writer.uint32(42).fork()).join();
        }
        if (message.includeMeta !== false) {
            writer.uint32(48).bool(message.includeMeta);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.action = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.actions.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.principal = exports.Principal.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.resource = exports.PlanResourcesInput_Resource.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.auxData = exports.AuxData.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.includeMeta = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePlanResourcesInput_Resource() {
    return { kind: "", attr: {}, policyVersion: "", scope: "" };
}
exports.PlanResourcesInput_Resource = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.kind !== "") {
            writer.uint32(10).string(message.kind);
        }
        Object.entries(message.attr).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.PlanResourcesInput_Resource_AttrEntry.encode({ key: key, value }, writer.uint32(18).fork()).join();
            }
        });
        if (message.policyVersion !== "") {
            writer.uint32(26).string(message.policyVersion);
        }
        if (message.scope !== "") {
            writer.uint32(34).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesInput_Resource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.kind = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.PlanResourcesInput_Resource_AttrEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.attr[entry2.key] = entry2.value;
                    }
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.policyVersion = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.scope = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePlanResourcesInput_Resource_AttrEntry() {
    return { key: "", value: undefined };
}
exports.PlanResourcesInput_Resource_AttrEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesInput_Resource_AttrEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePlanResourcesFilter() {
    return { kind: 0, condition: undefined };
}
exports.PlanResourcesFilter = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.kind !== 0) {
            writer.uint32(8).int32(message.kind);
        }
        if (message.condition !== undefined) {
            exports.PlanResourcesFilter_Expression_Operand.encode(message.condition, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.kind = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.condition = exports.PlanResourcesFilter_Expression_Operand.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePlanResourcesFilter_Expression() {
    return { operator: "", operands: [] };
}
exports.PlanResourcesFilter_Expression = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        for (const v of message.operands) {
            exports.PlanResourcesFilter_Expression_Operand.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesFilter_Expression();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.operator = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.operands.push(exports.PlanResourcesFilter_Expression_Operand.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePlanResourcesFilter_Expression_Operand() {
    return { node: undefined };
}
exports.PlanResourcesFilter_Expression_Operand = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        switch (message.node?.$case) {
            case "value":
                struct_1.Value.encode(struct_1.Value.wrap(message.node.value), writer.uint32(10).fork()).join();
                break;
            case "expression":
                exports.PlanResourcesFilter_Expression.encode(message.node.expression, writer.uint32(18).fork()).join();
                break;
            case "variable":
                writer.uint32(26).string(message.node.variable);
                break;
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesFilter_Expression_Operand();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.node = {
                        $case: "value",
                        value: struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32())),
                    };
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.node = {
                        $case: "expression",
                        expression: exports.PlanResourcesFilter_Expression.decode(reader, reader.uint32()),
                    };
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.node = { $case: "variable", variable: reader.string() };
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePlanResourcesOutput() {
    return {
        requestId: "",
        action: "",
        kind: "",
        policyVersion: "",
        scope: "",
        filter: undefined,
        filterDebug: "",
        validationErrors: [],
        actions: [],
        matchedScopes: {},
    };
}
exports.PlanResourcesOutput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.action !== "") {
            writer.uint32(18).string(message.action);
        }
        if (message.kind !== "") {
            writer.uint32(26).string(message.kind);
        }
        if (message.policyVersion !== "") {
            writer.uint32(34).string(message.policyVersion);
        }
        if (message.scope !== "") {
            writer.uint32(42).string(message.scope);
        }
        if (message.filter !== undefined) {
            exports.PlanResourcesFilter.encode(message.filter, writer.uint32(50).fork()).join();
        }
        if (message.filterDebug !== "") {
            writer.uint32(58).string(message.filterDebug);
        }
        for (const v of message.validationErrors) {
            schema_1.ValidationError.encode(v, writer.uint32(66).fork()).join();
        }
        for (const v of message.actions) {
            writer.uint32(74).string(v);
        }
        Object.entries(message.matchedScopes).forEach(([key, value]) => {
            exports.PlanResourcesOutput_MatchedScopesEntry.encode({ key: key, value }, writer.uint32(82).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.action = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.kind = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.policyVersion = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scope = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.filter = exports.PlanResourcesFilter.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.filterDebug = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.validationErrors.push(schema_1.ValidationError.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.actions.push(reader.string());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    const entry10 = exports.PlanResourcesOutput_MatchedScopesEntry.decode(reader, reader.uint32());
                    if (entry10.value !== undefined) {
                        message.matchedScopes[entry10.key] = entry10.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePlanResourcesOutput_MatchedScopesEntry() {
    return { key: "", value: "" };
}
exports.PlanResourcesOutput_MatchedScopesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesOutput_MatchedScopesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckInput() {
    return {
        requestId: "",
        resource: undefined,
        principal: undefined,
        actions: [],
        auxData: undefined,
    };
}
exports.CheckInput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.resource !== undefined) {
            exports.Resource.encode(message.resource, writer.uint32(18).fork()).join();
        }
        if (message.principal !== undefined) {
            exports.Principal.encode(message.principal, writer.uint32(26).fork()).join();
        }
        for (const v of message.actions) {
            writer.uint32(34).string(v);
        }
        if (message.auxData !== undefined) {
            exports.AuxData.encode(message.auxData, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.resource = exports.Resource.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.principal = exports.Principal.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.actions.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.auxData = exports.AuxData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckOutput() {
    return {
        requestId: "",
        resourceId: "",
        actions: {},
        effectiveDerivedRoles: [],
        validationErrors: [],
        outputs: [],
    };
}
exports.CheckOutput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.resourceId !== "") {
            writer.uint32(18).string(message.resourceId);
        }
        Object.entries(message.actions).forEach(([key, value]) => {
            exports.CheckOutput_ActionsEntry.encode({ key: key, value }, writer.uint32(26).fork()).join();
        });
        for (const v of message.effectiveDerivedRoles) {
            writer.uint32(34).string(v);
        }
        for (const v of message.validationErrors) {
            schema_1.ValidationError.encode(v, writer.uint32(42).fork()).join();
        }
        for (const v of message.outputs) {
            exports.OutputEntry.encode(v, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.resourceId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.CheckOutput_ActionsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.actions[entry3.key] = entry3.value;
                    }
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.effectiveDerivedRoles.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.validationErrors.push(schema_1.ValidationError.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.outputs.push(exports.OutputEntry.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckOutput_ActionEffect() {
    return { effect: 0, policy: "", scope: "" };
}
exports.CheckOutput_ActionEffect = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.effect !== 0) {
            writer.uint32(8).int32(message.effect);
        }
        if (message.policy !== "") {
            writer.uint32(18).string(message.policy);
        }
        if (message.scope !== "") {
            writer.uint32(26).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckOutput_ActionEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.effect = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.policy = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.scope = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckOutput_ActionsEntry() {
    return { key: "", value: undefined };
}
exports.CheckOutput_ActionsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.CheckOutput_ActionEffect.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckOutput_ActionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CheckOutput_ActionEffect.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseOutputEntry() {
    return { src: "", val: undefined };
}
exports.OutputEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.src !== "") {
            writer.uint32(10).string(message.src);
        }
        if (message.val !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.val), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOutputEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.src = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.val = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseResource() {
    return { kind: "", policyVersion: "", id: "", attr: {}, scope: "" };
}
exports.Resource = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.kind !== "") {
            writer.uint32(10).string(message.kind);
        }
        if (message.policyVersion !== "") {
            writer.uint32(18).string(message.policyVersion);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        Object.entries(message.attr).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.Resource_AttrEntry.encode({ key: key, value }, writer.uint32(34).fork()).join();
            }
        });
        if (message.scope !== "") {
            writer.uint32(42).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.kind = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.policyVersion = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    const entry4 = exports.Resource_AttrEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.attr[entry4.key] = entry4.value;
                    }
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scope = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseResource_AttrEntry() {
    return { key: "", value: undefined };
}
exports.Resource_AttrEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResource_AttrEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePrincipal() {
    return { id: "", policyVersion: "", roles: [], attr: {}, scope: "" };
}
exports.Principal = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.policyVersion !== "") {
            writer.uint32(18).string(message.policyVersion);
        }
        for (const v of message.roles) {
            writer.uint32(26).string(v);
        }
        Object.entries(message.attr).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.Principal_AttrEntry.encode({ key: key, value }, writer.uint32(34).fork()).join();
            }
        });
        if (message.scope !== "") {
            writer.uint32(42).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrincipal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.policyVersion = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.roles.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    const entry4 = exports.Principal_AttrEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.attr[entry4.key] = entry4.value;
                    }
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scope = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePrincipal_AttrEntry() {
    return { key: "", value: undefined };
}
exports.Principal_AttrEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrincipal_AttrEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseAuxData() {
    return { jwt: {} };
}
exports.AuxData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.jwt).forEach(([key, value]) => {
            if (value !== undefined) {
                exports.AuxData_JwtEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
            }
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuxData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.AuxData_JwtEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.jwt[entry1.key] = entry1.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseAuxData_JwtEntry() {
    return { key: "", value: undefined };
}
exports.AuxData_JwtEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuxData_JwtEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
//# sourceMappingURL=engine.js.map