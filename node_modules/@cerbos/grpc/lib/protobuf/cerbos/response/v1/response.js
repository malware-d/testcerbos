"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: cerbos/response/v1/response.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReloadStoreResponse = exports.DeleteSchemaResponse = exports.GetSchemaResponse = exports.ListSchemasResponse = exports.AddOrUpdateSchemaResponse = exports.InspectPoliciesResponse_ResultsEntry = exports.InspectPoliciesResponse_Result = exports.InspectPoliciesResponse_Variable = exports.InspectPoliciesResponse_Constant = exports.InspectPoliciesResponse_DerivedRole = exports.InspectPoliciesResponse_Attribute = exports.InspectPoliciesResponse = exports.EnablePolicyResponse = exports.DisablePolicyResponse = exports.GetPolicyResponse = exports.ListPoliciesResponse = exports.ServerInfoResponse = exports.ListAuditLogEntriesResponse = exports.AddOrUpdatePolicyResponse = exports.CheckResourcesResponse_ResultEntry_ActionsEntry = exports.CheckResourcesResponse_ResultEntry_Meta_ActionsEntry = exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta = exports.CheckResourcesResponse_ResultEntry_Meta = exports.CheckResourcesResponse_ResultEntry_Resource = exports.CheckResourcesResponse_ResultEntry = exports.CheckResourcesResponse = exports.CheckResourceBatchResponse_ActionEffectMap_ActionsEntry = exports.CheckResourceBatchResponse_ActionEffectMap = exports.CheckResourceBatchResponse = exports.CheckResourceSetResponse_ResourceInstancesEntry = exports.CheckResourceSetResponse_Meta_ResourceInstancesEntry = exports.CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry = exports.CheckResourceSetResponse_Meta_ActionMeta = exports.CheckResourceSetResponse_Meta_EffectMeta = exports.CheckResourceSetResponse_Meta = exports.CheckResourceSetResponse_ActionEffectMap_ActionsEntry = exports.CheckResourceSetResponse_ActionEffectMap = exports.CheckResourceSetResponse = exports.PlanResourcesResponse_Meta_MatchedScopesEntry = exports.PlanResourcesResponse_Meta = exports.PlanResourcesResponse = exports.InspectPoliciesResponse_Variable_Kind = exports.InspectPoliciesResponse_Constant_Kind = exports.InspectPoliciesResponse_DerivedRole_Kind = exports.InspectPoliciesResponse_Attribute_Kind = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const empty_1 = require("../../../google/protobuf/empty");
const struct_1 = require("../../../google/protobuf/struct");
const audit_1 = require("../../audit/v1/audit");
const engine_1 = require("../../engine/v1/engine");
const policy_1 = require("../../policy/v1/policy");
const schema_1 = require("../../schema/v1/schema");
exports.protobufPackage = "cerbos.response.v1";
var InspectPoliciesResponse_Attribute_Kind;
(function (InspectPoliciesResponse_Attribute_Kind) {
    InspectPoliciesResponse_Attribute_Kind[InspectPoliciesResponse_Attribute_Kind["KIND_UNSPECIFIED"] = 0] = "KIND_UNSPECIFIED";
    InspectPoliciesResponse_Attribute_Kind[InspectPoliciesResponse_Attribute_Kind["KIND_PRINCIPAL_ATTRIBUTE"] = 1] = "KIND_PRINCIPAL_ATTRIBUTE";
    InspectPoliciesResponse_Attribute_Kind[InspectPoliciesResponse_Attribute_Kind["KIND_RESOURCE_ATTRIBUTE"] = 2] = "KIND_RESOURCE_ATTRIBUTE";
})(InspectPoliciesResponse_Attribute_Kind || (exports.InspectPoliciesResponse_Attribute_Kind = InspectPoliciesResponse_Attribute_Kind = {}));
var InspectPoliciesResponse_DerivedRole_Kind;
(function (InspectPoliciesResponse_DerivedRole_Kind) {
    InspectPoliciesResponse_DerivedRole_Kind[InspectPoliciesResponse_DerivedRole_Kind["KIND_UNSPECIFIED"] = 0] = "KIND_UNSPECIFIED";
    InspectPoliciesResponse_DerivedRole_Kind[InspectPoliciesResponse_DerivedRole_Kind["KIND_UNDEFINED"] = 1] = "KIND_UNDEFINED";
    InspectPoliciesResponse_DerivedRole_Kind[InspectPoliciesResponse_DerivedRole_Kind["KIND_EXPORTED"] = 2] = "KIND_EXPORTED";
    InspectPoliciesResponse_DerivedRole_Kind[InspectPoliciesResponse_DerivedRole_Kind["KIND_IMPORTED"] = 3] = "KIND_IMPORTED";
})(InspectPoliciesResponse_DerivedRole_Kind || (exports.InspectPoliciesResponse_DerivedRole_Kind = InspectPoliciesResponse_DerivedRole_Kind = {}));
var InspectPoliciesResponse_Constant_Kind;
(function (InspectPoliciesResponse_Constant_Kind) {
    InspectPoliciesResponse_Constant_Kind[InspectPoliciesResponse_Constant_Kind["KIND_UNSPECIFIED"] = 0] = "KIND_UNSPECIFIED";
    InspectPoliciesResponse_Constant_Kind[InspectPoliciesResponse_Constant_Kind["KIND_EXPORTED"] = 1] = "KIND_EXPORTED";
    InspectPoliciesResponse_Constant_Kind[InspectPoliciesResponse_Constant_Kind["KIND_IMPORTED"] = 2] = "KIND_IMPORTED";
    InspectPoliciesResponse_Constant_Kind[InspectPoliciesResponse_Constant_Kind["KIND_LOCAL"] = 3] = "KIND_LOCAL";
    InspectPoliciesResponse_Constant_Kind[InspectPoliciesResponse_Constant_Kind["KIND_UNDEFINED"] = 4] = "KIND_UNDEFINED";
    InspectPoliciesResponse_Constant_Kind[InspectPoliciesResponse_Constant_Kind["KIND_UNKNOWN"] = 5] = "KIND_UNKNOWN";
})(InspectPoliciesResponse_Constant_Kind || (exports.InspectPoliciesResponse_Constant_Kind = InspectPoliciesResponse_Constant_Kind = {}));
var InspectPoliciesResponse_Variable_Kind;
(function (InspectPoliciesResponse_Variable_Kind) {
    InspectPoliciesResponse_Variable_Kind[InspectPoliciesResponse_Variable_Kind["KIND_UNSPECIFIED"] = 0] = "KIND_UNSPECIFIED";
    InspectPoliciesResponse_Variable_Kind[InspectPoliciesResponse_Variable_Kind["KIND_EXPORTED"] = 1] = "KIND_EXPORTED";
    InspectPoliciesResponse_Variable_Kind[InspectPoliciesResponse_Variable_Kind["KIND_IMPORTED"] = 2] = "KIND_IMPORTED";
    InspectPoliciesResponse_Variable_Kind[InspectPoliciesResponse_Variable_Kind["KIND_LOCAL"] = 3] = "KIND_LOCAL";
    InspectPoliciesResponse_Variable_Kind[InspectPoliciesResponse_Variable_Kind["KIND_UNDEFINED"] = 4] = "KIND_UNDEFINED";
    InspectPoliciesResponse_Variable_Kind[InspectPoliciesResponse_Variable_Kind["KIND_UNKNOWN"] = 5] = "KIND_UNKNOWN";
})(InspectPoliciesResponse_Variable_Kind || (exports.InspectPoliciesResponse_Variable_Kind = InspectPoliciesResponse_Variable_Kind = {}));
function createBasePlanResourcesResponse() {
    return {
        requestId: "",
        action: "",
        actions: [],
        resourceKind: "",
        policyVersion: "",
        filter: undefined,
        meta: undefined,
        validationErrors: [],
        cerbosCallId: "",
    };
}
exports.PlanResourcesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.action !== "") {
            writer.uint32(18).string(message.action);
        }
        for (const v of message.actions) {
            writer.uint32(74).string(v);
        }
        if (message.resourceKind !== "") {
            writer.uint32(26).string(message.resourceKind);
        }
        if (message.policyVersion !== "") {
            writer.uint32(34).string(message.policyVersion);
        }
        if (message.filter !== undefined) {
            engine_1.PlanResourcesFilter.encode(message.filter, writer.uint32(42).fork()).join();
        }
        if (message.meta !== undefined) {
            exports.PlanResourcesResponse_Meta.encode(message.meta, writer.uint32(50).fork()).join();
        }
        for (const v of message.validationErrors) {
            schema_1.ValidationError.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.cerbosCallId !== "") {
            writer.uint32(66).string(message.cerbosCallId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.action = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.actions.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.resourceKind = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.policyVersion = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.filter = engine_1.PlanResourcesFilter.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.meta = exports.PlanResourcesResponse_Meta.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.validationErrors.push(schema_1.ValidationError.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.cerbosCallId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePlanResourcesResponse_Meta() {
    return { filterDebug: "", matchedScope: "", matchedScopes: {} };
}
exports.PlanResourcesResponse_Meta = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.filterDebug !== "") {
            writer.uint32(10).string(message.filterDebug);
        }
        if (message.matchedScope !== "") {
            writer.uint32(18).string(message.matchedScope);
        }
        Object.entries(message.matchedScopes).forEach(([key, value]) => {
            exports.PlanResourcesResponse_Meta_MatchedScopesEntry.encode({ key: key, value }, writer.uint32(26).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesResponse_Meta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.filterDebug = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.matchedScope = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.PlanResourcesResponse_Meta_MatchedScopesEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.matchedScopes[entry3.key] = entry3.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePlanResourcesResponse_Meta_MatchedScopesEntry() {
    return { key: "", value: "" };
}
exports.PlanResourcesResponse_Meta_MatchedScopesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlanResourcesResponse_Meta_MatchedScopesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse() {
    return { requestId: "", resourceInstances: {}, meta: undefined };
}
exports.CheckResourceSetResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        Object.entries(message.resourceInstances).forEach(([key, value]) => {
            exports.CheckResourceSetResponse_ResourceInstancesEntry.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        if (message.meta !== undefined) {
            exports.CheckResourceSetResponse_Meta.encode(message.meta, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.CheckResourceSetResponse_ResourceInstancesEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.resourceInstances[entry2.key] = entry2.value;
                    }
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.meta = exports.CheckResourceSetResponse_Meta.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_ActionEffectMap() {
    return { actions: {}, validationErrors: [] };
}
exports.CheckResourceSetResponse_ActionEffectMap = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.actions).forEach(([key, value]) => {
            exports.CheckResourceSetResponse_ActionEffectMap_ActionsEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        for (const v of message.validationErrors) {
            schema_1.ValidationError.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_ActionEffectMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.CheckResourceSetResponse_ActionEffectMap_ActionsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.actions[entry1.key] = entry1.value;
                    }
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.validationErrors.push(schema_1.ValidationError.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_ActionEffectMap_ActionsEntry() {
    return { key: "", value: 0 };
}
exports.CheckResourceSetResponse_ActionEffectMap_ActionsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_ActionEffectMap_ActionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_Meta() {
    return { resourceInstances: {} };
}
exports.CheckResourceSetResponse_Meta = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.resourceInstances).forEach(([key, value]) => {
            exports.CheckResourceSetResponse_Meta_ResourceInstancesEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_Meta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.CheckResourceSetResponse_Meta_ResourceInstancesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.resourceInstances[entry1.key] = entry1.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_Meta_EffectMeta() {
    return { matchedPolicy: "", matchedScope: "" };
}
exports.CheckResourceSetResponse_Meta_EffectMeta = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchedPolicy !== "") {
            writer.uint32(10).string(message.matchedPolicy);
        }
        if (message.matchedScope !== "") {
            writer.uint32(18).string(message.matchedScope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_Meta_EffectMeta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.matchedPolicy = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.matchedScope = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_Meta_ActionMeta() {
    return { actions: {}, effectiveDerivedRoles: [] };
}
exports.CheckResourceSetResponse_Meta_ActionMeta = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.actions).forEach(([key, value]) => {
            exports.CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        for (const v of message.effectiveDerivedRoles) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_Meta_ActionMeta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.actions[entry1.key] = entry1.value;
                    }
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.effectiveDerivedRoles.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_Meta_ActionMeta_ActionsEntry() {
    return { key: "", value: undefined };
}
exports.CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.CheckResourceSetResponse_Meta_EffectMeta.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_Meta_ActionMeta_ActionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CheckResourceSetResponse_Meta_EffectMeta.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_Meta_ResourceInstancesEntry() {
    return { key: "", value: undefined };
}
exports.CheckResourceSetResponse_Meta_ResourceInstancesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.CheckResourceSetResponse_Meta_ActionMeta.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_Meta_ResourceInstancesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CheckResourceSetResponse_Meta_ActionMeta.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceSetResponse_ResourceInstancesEntry() {
    return { key: "", value: undefined };
}
exports.CheckResourceSetResponse_ResourceInstancesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.CheckResourceSetResponse_ActionEffectMap.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceSetResponse_ResourceInstancesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.CheckResourceSetResponse_ActionEffectMap.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceBatchResponse() {
    return { requestId: "", results: [] };
}
exports.CheckResourceBatchResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        for (const v of message.results) {
            exports.CheckResourceBatchResponse_ActionEffectMap.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceBatchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.results.push(exports.CheckResourceBatchResponse_ActionEffectMap.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceBatchResponse_ActionEffectMap() {
    return { resourceId: "", actions: {}, validationErrors: [] };
}
exports.CheckResourceBatchResponse_ActionEffectMap = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.resourceId !== "") {
            writer.uint32(10).string(message.resourceId);
        }
        Object.entries(message.actions).forEach(([key, value]) => {
            exports.CheckResourceBatchResponse_ActionEffectMap_ActionsEntry.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        for (const v of message.validationErrors) {
            schema_1.ValidationError.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceBatchResponse_ActionEffectMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.resourceId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.CheckResourceBatchResponse_ActionEffectMap_ActionsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.actions[entry2.key] = entry2.value;
                    }
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.validationErrors.push(schema_1.ValidationError.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourceBatchResponse_ActionEffectMap_ActionsEntry() {
    return { key: "", value: 0 };
}
exports.CheckResourceBatchResponse_ActionEffectMap_ActionsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourceBatchResponse_ActionEffectMap_ActionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse() {
    return { requestId: "", results: [], cerbosCallId: "" };
}
exports.CheckResourcesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        for (const v of message.results) {
            exports.CheckResourcesResponse_ResultEntry.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.cerbosCallId !== "") {
            writer.uint32(26).string(message.cerbosCallId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.results.push(exports.CheckResourcesResponse_ResultEntry.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.cerbosCallId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse_ResultEntry() {
    return {
        resource: undefined,
        actions: {},
        validationErrors: [],
        meta: undefined,
        outputs: [],
    };
}
exports.CheckResourcesResponse_ResultEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.resource !== undefined) {
            exports.CheckResourcesResponse_ResultEntry_Resource.encode(message.resource, writer.uint32(10).fork()).join();
        }
        Object.entries(message.actions).forEach(([key, value]) => {
            exports.CheckResourcesResponse_ResultEntry_ActionsEntry.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        for (const v of message.validationErrors) {
            schema_1.ValidationError.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.meta !== undefined) {
            exports.CheckResourcesResponse_ResultEntry_Meta.encode(message.meta, writer.uint32(34).fork()).join();
        }
        for (const v of message.outputs) {
            engine_1.OutputEntry.encode(v, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse_ResultEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.resource =
                        exports.CheckResourcesResponse_ResultEntry_Resource.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.CheckResourcesResponse_ResultEntry_ActionsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.actions[entry2.key] = entry2.value;
                    }
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.validationErrors.push(schema_1.ValidationError.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.meta = exports.CheckResourcesResponse_ResultEntry_Meta.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.outputs.push(engine_1.OutputEntry.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse_ResultEntry_Resource() {
    return { id: "", kind: "", policyVersion: "", scope: "" };
}
exports.CheckResourcesResponse_ResultEntry_Resource = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.kind !== "") {
            writer.uint32(18).string(message.kind);
        }
        if (message.policyVersion !== "") {
            writer.uint32(26).string(message.policyVersion);
        }
        if (message.scope !== "") {
            writer.uint32(34).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse_ResultEntry_Resource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.kind = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.policyVersion = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.scope = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse_ResultEntry_Meta() {
    return { actions: {}, effectiveDerivedRoles: [] };
}
exports.CheckResourcesResponse_ResultEntry_Meta = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.actions).forEach(([key, value]) => {
            exports.CheckResourcesResponse_ResultEntry_Meta_ActionsEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        for (const v of message.effectiveDerivedRoles) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse_ResultEntry_Meta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.CheckResourcesResponse_ResultEntry_Meta_ActionsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.actions[entry1.key] = entry1.value;
                    }
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.effectiveDerivedRoles.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse_ResultEntry_Meta_EffectMeta() {
    return { matchedPolicy: "", matchedScope: "" };
}
exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchedPolicy !== "") {
            writer.uint32(10).string(message.matchedPolicy);
        }
        if (message.matchedScope !== "") {
            writer.uint32(18).string(message.matchedScope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse_ResultEntry_Meta_EffectMeta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.matchedPolicy = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.matchedScope = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse_ResultEntry_Meta_ActionsEntry() {
    return { key: "", value: undefined };
}
exports.CheckResourcesResponse_ResultEntry_Meta_ActionsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse_ResultEntry_Meta_ActionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value =
                        exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCheckResourcesResponse_ResultEntry_ActionsEntry() {
    return { key: "", value: 0 };
}
exports.CheckResourcesResponse_ResultEntry_ActionsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckResourcesResponse_ResultEntry_ActionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseAddOrUpdatePolicyResponse() {
    return { success: undefined };
}
exports.AddOrUpdatePolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== undefined) {
            empty_1.Empty.encode(message.success, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOrUpdatePolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.success = empty_1.Empty.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseListAuditLogEntriesResponse() {
    return { entry: undefined };
}
exports.ListAuditLogEntriesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        switch (message.entry?.$case) {
            case "accessLogEntry":
                audit_1.AccessLogEntry.encode(message.entry.accessLogEntry, writer.uint32(10).fork()).join();
                break;
            case "decisionLogEntry":
                audit_1.DecisionLogEntry.encode(message.entry.decisionLogEntry, writer.uint32(18).fork()).join();
                break;
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAuditLogEntriesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.entry = {
                        $case: "accessLogEntry",
                        accessLogEntry: audit_1.AccessLogEntry.decode(reader, reader.uint32()),
                    };
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.entry = {
                        $case: "decisionLogEntry",
                        decisionLogEntry: audit_1.DecisionLogEntry.decode(reader, reader.uint32()),
                    };
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseServerInfoResponse() {
    return { version: "", commit: "", buildDate: "" };
}
exports.ServerInfoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.commit !== "") {
            writer.uint32(18).string(message.commit);
        }
        if (message.buildDate !== "") {
            writer.uint32(26).string(message.buildDate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.commit = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.buildDate = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseListPoliciesResponse() {
    return { policyIds: [] };
}
exports.ListPoliciesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.policyIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListPoliciesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policyIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGetPolicyResponse() {
    return { policies: [] };
}
exports.GetPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.policies) {
            policy_1.Policy.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policies.push(policy_1.Policy.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseDisablePolicyResponse() {
    return { disabledPolicies: 0 };
}
exports.DisablePolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.disabledPolicies !== 0) {
            writer.uint32(8).uint32(message.disabledPolicies);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDisablePolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.disabledPolicies = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseEnablePolicyResponse() {
    return { enabledPolicies: 0 };
}
exports.EnablePolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.enabledPolicies !== 0) {
            writer.uint32(8).uint32(message.enabledPolicies);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnablePolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.enabledPolicies = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseInspectPoliciesResponse() {
    return { results: {} };
}
exports.InspectPoliciesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.results).forEach(([key, value]) => {
            exports.InspectPoliciesResponse_ResultsEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectPoliciesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.InspectPoliciesResponse_ResultsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.results[entry1.key] = entry1.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseInspectPoliciesResponse_Attribute() {
    return { kind: 0, name: "" };
}
exports.InspectPoliciesResponse_Attribute = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.kind !== 0) {
            writer.uint32(8).int32(message.kind);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectPoliciesResponse_Attribute();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.kind = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseInspectPoliciesResponse_DerivedRole() {
    return { name: "", kind: 0, source: "" };
}
exports.InspectPoliciesResponse_DerivedRole = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.kind !== 0) {
            writer.uint32(16).int32(message.kind);
        }
        if (message.source !== "") {
            writer.uint32(26).string(message.source);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectPoliciesResponse_DerivedRole();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.kind = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseInspectPoliciesResponse_Constant() {
    return { name: "", value: undefined, kind: 0, source: "", used: false };
}
exports.InspectPoliciesResponse_Constant = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.value !== undefined) {
            struct_1.Value.encode(struct_1.Value.wrap(message.value), writer.uint32(18).fork()).join();
        }
        if (message.kind !== 0) {
            writer.uint32(24).int32(message.kind);
        }
        if (message.source !== "") {
            writer.uint32(34).string(message.source);
        }
        if (message.used !== false) {
            writer.uint32(40).bool(message.used);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectPoliciesResponse_Constant();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = struct_1.Value.unwrap(struct_1.Value.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.kind = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.used = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseInspectPoliciesResponse_Variable() {
    return { name: "", value: "", kind: 0, source: "", used: false };
}
exports.InspectPoliciesResponse_Variable = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        if (message.kind !== 0) {
            writer.uint32(24).int32(message.kind);
        }
        if (message.source !== "") {
            writer.uint32(34).string(message.source);
        }
        if (message.used !== false) {
            writer.uint32(40).bool(message.used);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectPoliciesResponse_Variable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.kind = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.used = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseInspectPoliciesResponse_Result() {
    return {
        actions: [],
        variables: [],
        policyId: "",
        derivedRoles: [],
        attributes: [],
        constants: [],
    };
}
exports.InspectPoliciesResponse_Result = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.actions) {
            writer.uint32(10).string(v);
        }
        for (const v of message.variables) {
            exports.InspectPoliciesResponse_Variable.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.policyId !== "") {
            writer.uint32(26).string(message.policyId);
        }
        for (const v of message.derivedRoles) {
            exports.InspectPoliciesResponse_DerivedRole.encode(v, writer.uint32(34).fork()).join();
        }
        for (const v of message.attributes) {
            exports.InspectPoliciesResponse_Attribute.encode(v, writer.uint32(42).fork()).join();
        }
        for (const v of message.constants) {
            exports.InspectPoliciesResponse_Constant.encode(v, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectPoliciesResponse_Result();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.actions.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.variables.push(exports.InspectPoliciesResponse_Variable.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.policyId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.derivedRoles.push(exports.InspectPoliciesResponse_DerivedRole.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.attributes.push(exports.InspectPoliciesResponse_Attribute.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.constants.push(exports.InspectPoliciesResponse_Constant.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseInspectPoliciesResponse_ResultsEntry() {
    return { key: "", value: undefined };
}
exports.InspectPoliciesResponse_ResultsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.InspectPoliciesResponse_Result.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectPoliciesResponse_ResultsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.InspectPoliciesResponse_Result.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseAddOrUpdateSchemaResponse() {
    return {};
}
exports.AddOrUpdateSchemaResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOrUpdateSchemaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseListSchemasResponse() {
    return { schemaIds: [] };
}
exports.ListSchemasResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.schemaIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSchemasResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.schemaIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGetSchemaResponse() {
    return { schemas: [] };
}
exports.GetSchemaResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.schemas) {
            schema_1.Schema.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSchemaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.schemas.push(schema_1.Schema.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseDeleteSchemaResponse() {
    return { deletedSchemas: 0 };
}
exports.DeleteSchemaResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.deletedSchemas !== 0) {
            writer.uint32(8).uint32(message.deletedSchemas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteSchemaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.deletedSchemas = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseReloadStoreResponse() {
    return {};
}
exports.ReloadStoreResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReloadStoreResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
//# sourceMappingURL=response.js.map