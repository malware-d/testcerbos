"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: cerbos/svc/v1/svc.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.CerbosAdminServiceClient = exports.CerbosAdminServiceService = exports.CerbosServiceClient = exports.CerbosServiceService = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_js_1 = require("@grpc/grpc-js");
const request_1 = require("../../request/v1/request");
const response_1 = require("../../response/v1/response");
exports.protobufPackage = "cerbos.svc.v1";
exports.CerbosServiceService = {
    checkResourceSet: {
        path: "/cerbos.svc.v1.CerbosService/CheckResourceSet",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.CheckResourceSetRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.CheckResourceSetRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.CheckResourceSetResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.CheckResourceSetResponse.decode(value),
    },
    checkResourceBatch: {
        path: "/cerbos.svc.v1.CerbosService/CheckResourceBatch",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.CheckResourceBatchRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.CheckResourceBatchRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.CheckResourceBatchResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.CheckResourceBatchResponse.decode(value),
    },
    checkResources: {
        path: "/cerbos.svc.v1.CerbosService/CheckResources",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.CheckResourcesRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.CheckResourcesRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.CheckResourcesResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.CheckResourcesResponse.decode(value),
    },
    serverInfo: {
        path: "/cerbos.svc.v1.CerbosService/ServerInfo",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.ServerInfoRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.ServerInfoRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.ServerInfoResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.ServerInfoResponse.decode(value),
    },
    planResources: {
        path: "/cerbos.svc.v1.CerbosService/PlanResources",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.PlanResourcesRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.PlanResourcesRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.PlanResourcesResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.PlanResourcesResponse.decode(value),
    },
};
exports.CerbosServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.CerbosServiceService, "cerbos.svc.v1.CerbosService");
exports.CerbosAdminServiceService = {
    addOrUpdatePolicy: {
        path: "/cerbos.svc.v1.CerbosAdminService/AddOrUpdatePolicy",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.AddOrUpdatePolicyRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.AddOrUpdatePolicyRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.AddOrUpdatePolicyResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.AddOrUpdatePolicyResponse.decode(value),
    },
    inspectPolicies: {
        path: "/cerbos.svc.v1.CerbosAdminService/InspectPolicies",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.InspectPoliciesRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.InspectPoliciesRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.InspectPoliciesResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.InspectPoliciesResponse.decode(value),
    },
    listPolicies: {
        path: "/cerbos.svc.v1.CerbosAdminService/ListPolicies",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.ListPoliciesRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.ListPoliciesRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.ListPoliciesResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.ListPoliciesResponse.decode(value),
    },
    getPolicy: {
        path: "/cerbos.svc.v1.CerbosAdminService/GetPolicy",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.GetPolicyRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.GetPolicyRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.GetPolicyResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.GetPolicyResponse.decode(value),
    },
    disablePolicy: {
        path: "/cerbos.svc.v1.CerbosAdminService/DisablePolicy",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.DisablePolicyRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.DisablePolicyRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.DisablePolicyResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.DisablePolicyResponse.decode(value),
    },
    enablePolicy: {
        path: "/cerbos.svc.v1.CerbosAdminService/EnablePolicy",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.EnablePolicyRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.EnablePolicyRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.EnablePolicyResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.EnablePolicyResponse.decode(value),
    },
    listAuditLogEntries: {
        path: "/cerbos.svc.v1.CerbosAdminService/ListAuditLogEntries",
        requestStream: false,
        responseStream: true,
        requestSerialize: (value) => Buffer.from(request_1.ListAuditLogEntriesRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.ListAuditLogEntriesRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.ListAuditLogEntriesResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.ListAuditLogEntriesResponse.decode(value),
    },
    addOrUpdateSchema: {
        path: "/cerbos.svc.v1.CerbosAdminService/AddOrUpdateSchema",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.AddOrUpdateSchemaRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.AddOrUpdateSchemaRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.AddOrUpdateSchemaResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.AddOrUpdateSchemaResponse.decode(value),
    },
    listSchemas: {
        path: "/cerbos.svc.v1.CerbosAdminService/ListSchemas",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.ListSchemasRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.ListSchemasRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.ListSchemasResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.ListSchemasResponse.decode(value),
    },
    getSchema: {
        path: "/cerbos.svc.v1.CerbosAdminService/GetSchema",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.GetSchemaRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.GetSchemaRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.GetSchemaResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.GetSchemaResponse.decode(value),
    },
    deleteSchema: {
        path: "/cerbos.svc.v1.CerbosAdminService/DeleteSchema",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.DeleteSchemaRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.DeleteSchemaRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.DeleteSchemaResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.DeleteSchemaResponse.decode(value),
    },
    reloadStore: {
        path: "/cerbos.svc.v1.CerbosAdminService/ReloadStore",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(request_1.ReloadStoreRequest.encode(value).finish()),
        requestDeserialize: (value) => request_1.ReloadStoreRequest.decode(value),
        responseSerialize: (value) => Buffer.from(response_1.ReloadStoreResponse.encode(value).finish()),
        responseDeserialize: (value) => response_1.ReloadStoreResponse.decode(value),
    },
};
exports.CerbosAdminServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.CerbosAdminServiceService, "cerbos.svc.v1.CerbosAdminService");
//# sourceMappingURL=svc.js.map