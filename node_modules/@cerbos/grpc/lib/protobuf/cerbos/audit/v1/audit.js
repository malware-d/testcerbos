"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: cerbos/audit/v1/audit.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditTrail_EffectivePoliciesEntry = exports.AuditTrail = exports.Peer = exports.MetaValues = exports.DecisionLogEntry_MetadataEntry = exports.DecisionLogEntry_PlanResources = exports.DecisionLogEntry_CheckResources = exports.DecisionLogEntry = exports.AccessLogEntry_MetadataEntry = exports.AccessLogEntry = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../../../google/protobuf/timestamp");
const engine_1 = require("../../engine/v1/engine");
const policy_1 = require("../../policy/v1/policy");
exports.protobufPackage = "cerbos.audit.v1";
function createBaseAccessLogEntry() {
    return {
        callId: "",
        timestamp: undefined,
        peer: undefined,
        metadata: {},
        method: "",
        statusCode: 0,
        oversized: false,
    };
}
exports.AccessLogEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.callId !== "") {
            writer.uint32(10).string(message.callId);
        }
        if (message.timestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).join();
        }
        if (message.peer !== undefined) {
            exports.Peer.encode(message.peer, writer.uint32(26).fork()).join();
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            exports.AccessLogEntry_MetadataEntry.encode({ key: key, value }, writer.uint32(34).fork()).join();
        });
        if (message.method !== "") {
            writer.uint32(42).string(message.method);
        }
        if (message.statusCode !== 0) {
            writer.uint32(48).uint32(message.statusCode);
        }
        if (message.oversized !== false) {
            writer.uint32(56).bool(message.oversized);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccessLogEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.callId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.peer = exports.Peer.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    const entry4 = exports.AccessLogEntry_MetadataEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.metadata[entry4.key] = entry4.value;
                    }
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.method = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.statusCode = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.oversized = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseAccessLogEntry_MetadataEntry() {
    return { key: "", value: undefined };
}
exports.AccessLogEntry_MetadataEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.MetaValues.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccessLogEntry_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.MetaValues.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseDecisionLogEntry() {
    return {
        callId: "",
        timestamp: undefined,
        peer: undefined,
        inputs: [],
        outputs: [],
        error: "",
        method: undefined,
        metadata: {},
        auditTrail: undefined,
        oversized: false,
    };
}
exports.DecisionLogEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.callId !== "") {
            writer.uint32(10).string(message.callId);
        }
        if (message.timestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).join();
        }
        if (message.peer !== undefined) {
            exports.Peer.encode(message.peer, writer.uint32(26).fork()).join();
        }
        for (const v of message.inputs) {
            engine_1.CheckInput.encode(v, writer.uint32(34).fork()).join();
        }
        for (const v of message.outputs) {
            engine_1.CheckOutput.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.error !== "") {
            writer.uint32(50).string(message.error);
        }
        switch (message.method?.$case) {
            case "checkResources":
                exports.DecisionLogEntry_CheckResources.encode(message.method.checkResources, writer.uint32(58).fork()).join();
                break;
            case "planResources":
                exports.DecisionLogEntry_PlanResources.encode(message.method.planResources, writer.uint32(66).fork()).join();
                break;
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            exports.DecisionLogEntry_MetadataEntry.encode({ key: key, value }, writer.uint32(122).fork()).join();
        });
        if (message.auditTrail !== undefined) {
            exports.AuditTrail.encode(message.auditTrail, writer.uint32(130).fork()).join();
        }
        if (message.oversized !== false) {
            writer.uint32(136).bool(message.oversized);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecisionLogEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.callId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.peer = exports.Peer.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.inputs.push(engine_1.CheckInput.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.outputs.push(engine_1.CheckOutput.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.method = {
                        $case: "checkResources",
                        checkResources: exports.DecisionLogEntry_CheckResources.decode(reader, reader.uint32()),
                    };
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.method = {
                        $case: "planResources",
                        planResources: exports.DecisionLogEntry_PlanResources.decode(reader, reader.uint32()),
                    };
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    const entry15 = exports.DecisionLogEntry_MetadataEntry.decode(reader, reader.uint32());
                    if (entry15.value !== undefined) {
                        message.metadata[entry15.key] = entry15.value;
                    }
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.auditTrail = exports.AuditTrail.decode(reader, reader.uint32());
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.oversized = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseDecisionLogEntry_CheckResources() {
    return { inputs: [], outputs: [], error: "" };
}
exports.DecisionLogEntry_CheckResources = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.inputs) {
            engine_1.CheckInput.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.outputs) {
            engine_1.CheckOutput.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.error !== "") {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecisionLogEntry_CheckResources();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.inputs.push(engine_1.CheckInput.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.outputs.push(engine_1.CheckOutput.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseDecisionLogEntry_PlanResources() {
    return { input: undefined, output: undefined, error: "" };
}
exports.DecisionLogEntry_PlanResources = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.input !== undefined) {
            engine_1.PlanResourcesInput.encode(message.input, writer.uint32(10).fork()).join();
        }
        if (message.output !== undefined) {
            engine_1.PlanResourcesOutput.encode(message.output, writer.uint32(18).fork()).join();
        }
        if (message.error !== "") {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecisionLogEntry_PlanResources();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.input = engine_1.PlanResourcesInput.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.output = engine_1.PlanResourcesOutput.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseDecisionLogEntry_MetadataEntry() {
    return { key: "", value: undefined };
}
exports.DecisionLogEntry_MetadataEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.MetaValues.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecisionLogEntry_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.MetaValues.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMetaValues() {
    return { values: [] };
}
exports.MetaValues = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.values) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetaValues();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.values.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePeer() {
    return { address: "", authInfo: "", userAgent: "", forwardedFor: "" };
}
exports.Peer = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.authInfo !== "") {
            writer.uint32(18).string(message.authInfo);
        }
        if (message.userAgent !== "") {
            writer.uint32(26).string(message.userAgent);
        }
        if (message.forwardedFor !== "") {
            writer.uint32(34).string(message.forwardedFor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePeer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.authInfo = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.userAgent = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.forwardedFor = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseAuditTrail() {
    return { effectivePolicies: {} };
}
exports.AuditTrail = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.effectivePolicies).forEach(([key, value]) => {
            exports.AuditTrail_EffectivePoliciesEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuditTrail();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.AuditTrail_EffectivePoliciesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.effectivePolicies[entry1.key] = entry1.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseAuditTrail_EffectivePoliciesEntry() {
    return { key: "", value: undefined };
}
exports.AuditTrail_EffectivePoliciesEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            policy_1.SourceAttributes.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuditTrail_EffectivePoliciesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = policy_1.SourceAttributes.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1_000).toString();
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
//# sourceMappingURL=audit.js.map